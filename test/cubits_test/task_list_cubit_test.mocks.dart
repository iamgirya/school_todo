// Mocks generated by Mockito 5.3.0 from annotations
// in school_todo/test/cubits_test/task_list_cubit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:school_todo/core/app_metrica_controller.dart' as _i8;
import 'package:school_todo/models/animated_task_model.dart' as _i6;
import 'package:school_todo/models/task_model.dart' as _i7;
import 'package:school_todo/repositories/global_task_repository.dart' as _i3;
import 'package:school_todo/repositories/local_task_repository.dart' as _i2;
import 'package:school_todo/repositories/task_list_repository.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeILocalTaskSavesRepository_0 extends _i1.SmartFake
    implements _i2.ILocalTaskSavesRepository {
  _FakeILocalTaskSavesRepository_0(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeIGlobalTaskSavesRepository_1 extends _i1.SmartFake
    implements _i3.IGlobalTaskSavesRepository {
  _FakeIGlobalTaskSavesRepository_1(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

/// A class which mocks [ITaskSavesRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockITaskSavesRepository extends _i1.Mock
    implements _i4.ITaskSavesRepository {
  MockITaskSavesRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ILocalTaskSavesRepository get localRepo =>
      (super.noSuchMethod(Invocation.getter(#localRepo),
              returnValue: _FakeILocalTaskSavesRepository_0(
                  this, Invocation.getter(#localRepo)))
          as _i2.ILocalTaskSavesRepository);
  @override
  _i3.IGlobalTaskSavesRepository get globalRepo =>
      (super.noSuchMethod(Invocation.getter(#globalRepo),
              returnValue: _FakeIGlobalTaskSavesRepository_1(
                  this, Invocation.getter(#globalRepo)))
          as _i3.IGlobalTaskSavesRepository);
  @override
  bool get isOffline =>
      (super.noSuchMethod(Invocation.getter(#isOffline), returnValue: false)
          as bool);
  @override
  _i5.Future<bool> postChanges(
          List<_i6.AnimatedTask>? newLoadedTasks, _i6.AnimatedTask? postTask) =>
      (super.noSuchMethod(
          Invocation.method(#postChanges, [newLoadedTasks, postTask]),
          returnValue: _i5.Future<bool>.value(false)) as _i5.Future<bool>);
  @override
  _i5.Future<bool> putChanges(List<_i6.AnimatedTask>? newLoadedTasks,
          String? changedTaskId, _i6.AnimatedTask? putTask) =>
      (super.noSuchMethod(
          Invocation.method(
              #putChanges, [newLoadedTasks, changedTaskId, putTask]),
          returnValue: _i5.Future<bool>.value(false)) as _i5.Future<bool>);
  @override
  _i5.Future<bool> deleteChanges(
          List<_i6.AnimatedTask>? newLoadedTasks, String? deleteTaskId) =>
      (super.noSuchMethod(
          Invocation.method(#deleteChanges, [newLoadedTasks, deleteTaskId]),
          returnValue: _i5.Future<bool>.value(false)) as _i5.Future<bool>);
  @override
  _i5.Future<List<_i7.Task>> loadActualTaskList() =>
      (super.noSuchMethod(Invocation.method(#loadActualTaskList, []),
              returnValue: _i5.Future<List<_i7.Task>>.value(<_i7.Task>[]))
          as _i5.Future<List<_i7.Task>>);
  @override
  Map<String, bool> loadConfiguration() =>
      (super.noSuchMethod(Invocation.method(#loadConfiguration, []),
          returnValue: <String, bool>{}) as Map<String, bool>);
  @override
  void saveConfiguration({bool? isTaskSorting}) => super.noSuchMethod(
      Invocation.method(
          #saveConfiguration, [], {#isTaskSorting: isTaskSorting}),
      returnValueForMissingStub: null);
}

/// A class which mocks [AppMetricaController].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppMetricaController extends _i1.Mock
    implements _i8.AppMetricaController {
  MockAppMetricaController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isActivated =>
      (super.noSuchMethod(Invocation.getter(#isActivated), returnValue: false)
          as bool);
  @override
  set isActivated(bool? _isActivated) =>
      super.noSuchMethod(Invocation.setter(#isActivated, _isActivated),
          returnValueForMissingStub: null);
  @override
  _i5.Future<void> initAppMetric() => (super.noSuchMethod(
      Invocation.method(#initAppMetric, []),
      returnValue: _i5.Future<void>.value(),
      returnValueForMissingStub: _i5.Future<void>.value()) as _i5.Future<void>);
  @override
  void reportEvent(String? text) =>
      super.noSuchMethod(Invocation.method(#reportEvent, [text]),
          returnValueForMissingStub: null);
  @override
  void reportEventWithMap(String? text, Map<String, Object>? map) =>
      super.noSuchMethod(Invocation.method(#reportEventWithMap, [text, map]),
          returnValueForMissingStub: null);
}
